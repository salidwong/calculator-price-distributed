import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchProduct } from "../api/product";

const initialState = {
  list: [],
  selectedProductId: "0",
  status: "idle",
};

export const getProduct = createAsyncThunk(
  "product/fetchProduct",
  async (amount) => {
    const response = await fetchProduct();
    console.log("response in getProduct", response);
    return response;
  }
);

export const product = createSlice({
  name: "product",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setSelectedProductId: (state, action) => {
      const { payload } = action;
      state.selectedProductId = payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getProduct.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getProduct.fulfilled, (state, action) => {
        state.status = "idle";
        state.list = action.payload;
      });
  },
});

export const { setSelectedProductId } = product.actions;

export const selectProduct = (state) => state.product;
export const selectProductList = (state) => state.product.list;
export const selectStatus = (state) => state.product.status;
export const selectSelectedProductId = (state) =>
  state.product.selectedProductId;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default product.reducer;
